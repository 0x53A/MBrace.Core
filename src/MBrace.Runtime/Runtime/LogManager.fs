namespace MBrace.Runtime

open System
open System.Runtime.Serialization

open MBrace.Core
open MBrace.Core.Internals

/// Represents a log entry that has been generated by an MBrace process
[<Struct; DataContract>]
type CloudLogEntry =

    /// Date of log entry creation
    [<DataMember(Name = "DateTime", Order = 0)>]
    val DateTime : DateTimeOffset
    /// Message of log entry
    [<DataMember(Name = "Message", Order = 1)>]
    val Message : string
    /// Task identifier for log entry
    [<DataMember(Name = "CloudProcessId", Order = 2)>]
    val CloudProcessId : string
    /// Worker identifier for log entry
    [<DataMember(Name = "WorkerId", Order = 3)>]
    val WorkerId : string
    /// Work item identifier for log entry
    [<DataMember(Name = "WorkItemId", Order = 4)>]
    val WorkItem : CloudWorkItemId

    new (procId : string, workerId : string, workItem : CloudWorkItemId, dateTime : DateTimeOffset, message : string) =
        { CloudProcessId = procId ; WorkerId = workerId ; WorkItem = workItem ; DateTime = dateTime ; Message = message }

    /// <summary>
    ///     Prints log entry as a single line string.
    /// </summary>
    /// <param name="cle">Cloud log entry to be printed.</param>
    /// <param name="showDate">Show date at the beginning. Defaults to false.</param>
    static member Format(cle : CloudLogEntry, ?showDate : bool) =
        if defaultArg showDate false then
            let local = cle.DateTime.LocalDateTime
            let date = local.ToString("yyyy-MM-dd H:mm:ss")
            sprintf "[%s][Worker:%s][WorkItem:%O] %s" date cle.WorkerId cle.WorkItem cle.Message
        else 
            sprintf "[Worker:%s][WorkItem:%O] %s" cle.WorkerId cle.WorkItem cle.Message

/// CloudLogger instance used for logging a specific work item
type ICloudWorkItemLogger =
    inherit IDisposable
    inherit ICloudLogger

/// Log polling abstraction used for subscribing to new log events
type ILogPoller<'LogEntry> =
    inherit IDisposable
    inherit IEvent<'LogEntry>

/// Abstraction used for managing cloud log entries
type ICloudLogManager =
    /// <summary>
    ///     Gets a CloudLogger instance specific to supplied CloudWorkItem.
    /// </summary>
    /// <param name="worker">Current worker identifier.</param>
    /// <param name="workItem">Current cloud work item.</param>
    abstract CreateWorkItemLogger : worker:IWorkerId * workItem:CloudWorkItem -> Async<ICloudWorkItemLogger>

    /// <summary>
    ///     Asynchronoulsy fetches all log entries related to the cloud process of the provided id.
    /// </summary>
    /// <param name="procId">Task identifier to be queried.</param>
    abstract GetAllCloudLogsByProcess : procId:string -> Async<seq<CloudLogEntry>>

    /// <summary>
    ///     Asynchronously returns an event for cloud logs generated by cloud process id.
    /// </summary>
    /// <param name="procId">Task identifier to be queried.</param>
    abstract GetCloudLogPollerByProcess : procId:string -> Async<ILogPoller<CloudLogEntry>>

/// Object for managing system logs generated by the current process
type ILocalSystemLogManager =
    /// Logger abstraction used by the current process only.
    abstract Logger : ISystemLogger

    /// Gets or sets the default log level for the local system logger.
    abstract LogLevel : LogLevel with get,set

    /// <summary>
    ///     Attaches a logger to the local process only.
    ///     Returns an uninstallation token.
    /// </summary>
    /// <param name="localLogger">Logger to be attached.</param>
    abstract AttachLogger : localLogger:ISystemLogger -> IDisposable

/// ILoclaSystemLogManager wrapper for AttacheableLogger
type AttacheableLoggerManager(logger : AttacheableLogger) =
    interface ILocalSystemLogManager with
        member x.Logger = logger :> _    
        member x.AttachLogger l = logger.AttachLogger l
        member x.LogLevel
            with get () = logger.LogLevel
            and set l = logger.LogLevel <- l


/// Object for managing system logs generated by the entire cluster.
type IRuntimeSystemLogManager =
    /// <summary>
    ///     Asynchronously initializes a system logger implementation that logs entries to the cluster state.
    /// </summary>
    /// <param name="id">Current worker identifier.</param>
    abstract CreateLogWriter : id:IWorkerId -> Async<ISystemLogger>

    /// <summary>
    ///     Asynchronously fetches all system logs produced by all workers in the cluster.
    /// </summary>
    abstract GetRuntimeLogs : unit -> Async<seq<SystemLogEntry>>

    /// <summary>
    ///     Asynchronoulsy fetches all system logs produced by worker of given id.
    /// </summary>
    /// <param name="id">Worker identifier.</param>
    abstract GetWorkerLogs : id:IWorkerId -> Async<seq<SystemLogEntry>>

    /// <summary>
    ///     Asynchronously fetches an event to system logs produced by all workers in the cluster.
    /// </summary>
    abstract CreateLogPoller : unit -> Async<ILogPoller<SystemLogEntry>>

    /// <summary>
    ///     Asynchronously creates a poller event to system logs produced by worker of given id.
    /// </summary>
    /// <param name="id">Worker identifier.</param>
    abstract CreateWorkerLogPoller : id:IWorkerId -> Async<ILogPoller<SystemLogEntry>>

    /// <summary>
    ///     Clear logs for worker of specified id.
    /// </summary>
    /// <param name="id">Worker id to be cleared.</param>
    abstract ClearLogs : id:IWorkerId -> Async<unit>

    /// <summary>
    ///     Clear all worker logs.
    /// </summary>
    abstract ClearLogs : unit -> Async<unit>
namespace MBrace.Runtime

open System
open System.Runtime.Serialization

open MBrace.Core
open MBrace.Core.Internals

/// Represents a log entry that has been generated by an MBrace process
[<Struct; DataContract>]
type CloudLogEntry =

    [<DataMember(Name = "TaskId")>]
    val mutable private taskId : string
    [<DataMember(Name = "WorkerId")>]
    val mutable private workerId : string
    [<DataMember(Name = "JobId")>]
    val mutable private jobId : string
    [<DataMember(Name = "DateTime")>]
    val mutable private dateTime : DateTime
    [<DataMember(Name = "Message")>]
    val mutable private message : string

    new (taskId : string, workerId : string, jobId : string, dateTime : DateTime, message : string) =
        { taskId = taskId ; workerId = workerId ; jobId = jobId ; dateTime = dateTime ; message = message }

    /// Task identifier for log entry
    member e.TaskId = e.taskId
    /// Worker identifier for log entry
    member e.WorkerId = e.workerId
    /// Job identifier for log entry
    member e.JobId = e.jobId
    /// Date of log entry creation
    member e.DateTime = e.dateTime
    /// Message of log entry
    member e.Message = e.message

    member e.ToString(showDate:bool) =
        if showDate then
            let date = e.dateTime.ToString("yyyy-MM-dd H:mm:ss")
            sprintf "[%s][Worker:%s][Job:%s] %s" date e.workerId e.jobId e.message
        else 
            sprintf "[Worker:%s][Job:%s] %s" e.workerId e.jobId e.message

/// CloudLogger instance used for logging a specific job
type IJobLogger =
    inherit ICloudLogger
    inherit IDisposable

type ILogObservable =
    inherit IDisposable
    inherit IObservable<CloudLogEntry>

/// Abstraction used for managing cloud log entries
type ICloudLogManager =
    /// <summary>
    ///     Gets a CloudLogger instance specific to supplied CloudJob.
    /// </summary>
    /// <param name="worker">Current worker identifier.</param>
    /// <param name="job">Current cloud job.</param>
    abstract GetCloudLogger : worker:IWorkerId * job:CloudJob -> Async<IJobLogger>

    /// <summary>
    ///     Asynchronoulsy fetches all log entries related to task of provided id.
    /// </summary>
    /// <param name="taskId">Task identifier to be queried.</param>
    abstract GetAllCloudLogEntriesByTask : taskId:string -> Async<seq<CloudLogEntry>>

    /// <summary>
    ///     Asynchronously returns an observable for cloud logs generated by task id.
    /// </summary>
    /// <param name="taskId">Task identifier to be queried.</param>
    abstract GetCloudLogEntriesObservableByTask : taskId:string -> Async<ILogObservable>